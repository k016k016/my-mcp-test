// RLS„Éù„É™„Ç∑„Éº„Çí‰øÆÊ≠£„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà
import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'
import { readFileSync } from 'fs'
import { join } from 'path'

// .env.local„ÇíË™≠„ÅøËæº„ÇÄ
config({ path: '.env.local' })

async function applyRLSFix() {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

  if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Áí∞Â¢ÉÂ§âÊï∞„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')
    process.exit(1)
  }

  const supabase = createClient(supabaseUrl, supabaseServiceKey)

  console.log('üîß RLS„Éù„É™„Ç∑„Éº„Çí‰øÆÊ≠£‰∏≠...\n')

  // Êó¢Â≠ò„ÅÆINSERT„Éù„É™„Ç∑„Éº„ÇíÂâäÈô§
  const dropPolicies = [
    'DROP POLICY IF EXISTS "Authenticated users can create organizations" ON organizations',
    'DROP POLICY IF EXISTS "Users can create organizations" ON organizations',
    'DROP POLICY IF EXISTS "Anyone can create organizations" ON organizations',
  ]

  for (const sql of dropPolicies) {
    console.log(`ÂÆüË°å‰∏≠: ${sql}`)
    const { error } = await supabase.rpc('exec_sql', { sql_query: sql })
    if (error && !error.message.includes('does not exist')) {
      console.warn(`‚ö†Ô∏è  Ë≠¶Âëä: ${error.message}`)
    }
  }

  // Êñ∞„Åó„ÅÑINSERT„Éù„É™„Ç∑„Éº„Çí‰ΩúÊàê
  const createPolicySQL = `
    CREATE POLICY "Authenticated users can create organizations"
    ON organizations FOR INSERT
    TO authenticated
    WITH CHECK (true);
  `

  console.log('\nÊñ∞„Åó„ÅÑ„Éù„É™„Ç∑„Éº„Çí‰ΩúÊàê‰∏≠...')
  const { error: createError } = await supabase.rpc('exec_sql', { sql_query: createPolicySQL })

  if (createError) {
    console.error('‚ùå „Éù„É™„Ç∑„Éº‰ΩúÊàê„Ç®„É©„Éº:', createError.message)
    console.log('\nüìù ÊâãÂãï„ÅßÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ:')
    console.log('   Supabase Dashboard > SQL Editor')
    console.log('   „Éï„Ç°„Ç§„É´: supabase/scripts/fix-organizations-rls.sql')
    process.exit(1)
  }

  console.log('‚úÖ „Éù„É™„Ç∑„Éº‰ΩúÊàêÊàêÂäü\n')

  // Á¢∫Ë™ç„ÉÜ„Çπ„Éà
  console.log('üß™ Á¢∫Ë™ç„ÉÜ„Çπ„Éà: ÁµÑÁπî‰ΩúÊàêÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ')

  const testEmail = `test-rls-${Date.now()}@example.com`
  const { data: authData, error: authError } = await supabase.auth.admin.createUser({
    email: testEmail,
    password: 'test1234',
    email_confirm: true,
  })

  if (authError || !authData.user) {
    console.error('‚ùå „ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº‰ΩúÊàê„Ç®„É©„Éº:', authError)
    return
  }

  console.log(`‚úÖ „ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº‰ΩúÊàê: ${testEmail}`)

  // „É¶„Éº„Ç∂„Éº„ÇØ„É©„Ç§„Ç¢„É≥„Éà„Çí‰ΩúÊàê
  const userClient = createClient(supabaseUrl, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!)

  const { error: signInError } = await userClient.auth.signInWithPassword({
    email: testEmail,
    password: 'test1234',
  })

  if (signInError) {
    console.error('‚ùå „É≠„Ç∞„Ç§„É≥„Ç®„É©„Éº:', signInError)
    return
  }

  // ÁµÑÁπî„Çí‰ΩúÊàê
  const { data: org, error: orgError } = await userClient
    .from('organizations')
    .insert({
      name: 'Test Organization RLS',
      subscription_plan: 'free',
      subscription_status: 'active',
    })
    .select()
    .single()

  if (orgError) {
    console.error('‚ùå ÁµÑÁπî‰ΩúÊàê„Ç®„É©„Éº:', orgError)
    console.log('\nüî¥ ‰øÆÊ≠£„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
    console.log('üìù Supabase Dashboard„ÅßÊâãÂãï‰øÆÊ≠£„ÅåÂøÖË¶Å„Åß„Åô')
  } else {
    console.log('‚úÖ ÁµÑÁπî‰ΩúÊàêÊàêÂäü')
    console.log('\nüü¢ RLS„Éù„É™„Ç∑„Éº‰øÆÊ≠£ÂÆå‰∫ÜÔºÅ')

    // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    await supabase.from('organizations').delete().eq('id', org.id)
    console.log('üßπ „ÉÜ„Çπ„Éà„Éá„Éº„Çø„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Åó„Åæ„Åó„Åü')
  }

  await supabase.auth.admin.deleteUser(authData.user.id)
  console.log('üßπ „ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü')
}

applyRLSFix().catch((error) => {
  console.error('‚ùå „Ç®„É©„Éº:', error)
  process.exit(1)
})
