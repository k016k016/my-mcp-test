// multiorg@example.com „Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆËá™Âãï‰ΩúÊàê„Çπ„ÇØ„É™„Éó„Éà
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Áí∞Â¢ÉÂ§âÊï∞„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

async function createMultiOrgUser() {
  console.log('üöÄ multiorg@example.com „Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆËá™Âãï‰ΩúÊàê„ÇíÈñãÂßã...\n')

  // 1. Êó¢Â≠ò„ÅÆ„É¶„Éº„Ç∂„Éº„Çí„ÉÅ„Çß„ÉÉ„ÇØ
  const { data: existingUsers } = await supabase.auth.admin.listUsers()
  const existingUser = existingUsers.users.find(u => u.email === 'multiorg@example.com')

  let userId

  if (existingUser) {
    console.log('‚úÖ „É¶„Éº„Ç∂„Éº„ÅØÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô')
    console.log(`   „É¶„Éº„Ç∂„ÉºID: ${existingUser.id}\n`)
    userId = existingUser.id
  } else {
    // 2. „É¶„Éº„Ç∂„Éº„Çí‰ΩúÊàê
    console.log('üìù „É¶„Éº„Ç∂„Éº„Çí‰ΩúÊàê‰∏≠...')
    const { data: newUser, error: userError } = await supabase.auth.admin.createUser({
      email: 'multiorg@example.com',
      password: 'test1234',
      email_confirm: true,
      user_metadata: {
        full_name: 'Multi Org User'
      }
    })

    if (userError) {
      console.error('‚ùå „É¶„Éº„Ç∂„Éº‰ΩúÊàê„Ç®„É©„Éº:', userError.message)
      return false
    }

    userId = newUser.user.id
    console.log('‚úÖ „É¶„Éº„Ç∂„Éº„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü')
    console.log(`   „É¶„Éº„Ç∂„ÉºID: ${userId}\n`)

    // 3. „Éó„É≠„Éï„Ç£„Éº„É´„Çí‰ΩúÊàê
    console.log('üìù „Éó„É≠„Éï„Ç£„Éº„É´„Çí‰ΩúÊàê‰∏≠...')
    const { error: profileError } = await supabase
      .from('profiles')
      .insert({
        id: userId,
        email: 'multiorg@example.com',
        full_name: 'Multi Org User'
      })

    if (profileError) {
      console.error('‚ö†Ô∏è  „Éó„É≠„Éï„Ç£„Éº„É´‰ΩúÊàê„Ç®„É©„ÉºÔºàÁÑ°Ë¶ñÔºâ:', profileError.message)
    } else {
      console.log('‚úÖ „Éó„É≠„Éï„Ç£„Éº„É´„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü\n')
    }
  }

  // 4. Êó¢Â≠ò„ÅÆÁµÑÁπî„ÇíÁ¢∫Ë™ç
  const { data: existingMemberships } = await supabase
    .from('organization_members')
    .select('organization_id, role, organization:organizations(name)')
    .eq('user_id', userId)
    .is('deleted_at', null)

  console.log(`üìä ÁèæÂú®„ÅÆÊâÄÂ±ûÁµÑÁπî: ${existingMemberships?.length || 0}ÂÄã\n`)

  // 5. ÁµÑÁπî1„Çí‰ΩúÊàêÔºàownerÊ®©ÈôêÔºâ
  let org1Id
  const org1Membership = existingMemberships?.find(m => m.role === 'owner')

  if (org1Membership) {
    console.log('‚úÖ ÁµÑÁπî1ÔºàownerÊ®©ÈôêÔºâ„ÅØÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô')
    console.log(`   ÁµÑÁπîÂêç: ${org1Membership.organization.name}`)
    console.log(`   ÁµÑÁπîID: ${org1Membership.organization_id}\n`)
    org1Id = org1Membership.organization_id
  } else {
    console.log('üìù ÁµÑÁπî1„Çí‰ΩúÊàê‰∏≠ÔºàOwner OrganizationÔºâ...')
    const { data: org1, error: org1Error } = await supabase
      .from('organizations')
      .insert({
        name: 'Owner Organization',
        subscription_plan: 'free',
        subscription_status: 'active'
      })
      .select()
      .single()

    if (org1Error) {
      console.error('‚ùå ÁµÑÁπî1‰ΩúÊàê„Ç®„É©„Éº:', org1Error.message)
      return false
    }

    org1Id = org1.id
    console.log('‚úÖ ÁµÑÁπî1„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü')
    console.log(`   ÁµÑÁπîID: ${org1Id}\n`)

    // 6. „É¶„Éº„Ç∂„Éº„ÇíÁµÑÁπî1„Å´ownerÊ®©Èôê„ÅßËøΩÂä†
    console.log('üìù „É¶„Éº„Ç∂„Éº„ÇíÁµÑÁπî1„Å´ownerÊ®©Èôê„ÅßËøΩÂä†‰∏≠...')
    const { error: member1Error } = await supabase
      .from('organization_members')
      .insert({
        organization_id: org1Id,
        user_id: userId,
        role: 'owner'
      })

    if (member1Error) {
      console.error('‚ùå „É°„É≥„Éê„ÉºËøΩÂä†„Ç®„É©„Éº:', member1Error.message)
      return false
    }

    console.log('‚úÖ ownerÊ®©Èôê„ÅßËøΩÂä†„Åó„Åæ„Åó„Åü\n')
  }

  // 7. ÁµÑÁπî2„Çí‰ΩúÊàêÔºàadminÊ®©ÈôêÔºâ
  const org2Membership = existingMemberships?.find(m =>
    m.role === 'admin' && m.organization_id !== org1Id
  )

  if (org2Membership) {
    console.log('‚úÖ ÁµÑÁπî2ÔºàadminÊ®©ÈôêÔºâ„ÅØÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô')
    console.log(`   ÁµÑÁπîÂêç: ${org2Membership.organization.name}`)
    console.log(`   ÁµÑÁπîID: ${org2Membership.organization_id}\n`)
  } else {
    console.log('üìù ÁµÑÁπî2„Çí‰ΩúÊàê‰∏≠ÔºàAdmin OrganizationÔºâ...')
    const { data: org2, error: org2Error } = await supabase
      .from('organizations')
      .insert({
        name: 'Admin Organization',
        subscription_plan: 'free',
        subscription_status: 'active'
      })
      .select()
      .single()

    if (org2Error) {
      console.error('‚ùå ÁµÑÁπî2‰ΩúÊàê„Ç®„É©„Éº:', org2Error.message)
      return false
    }

    console.log('‚úÖ ÁµÑÁπî2„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü')
    console.log(`   ÁµÑÁπîID: ${org2.id}\n`)

    // 8. „É¶„Éº„Ç∂„Éº„ÇíÁµÑÁπî2„Å´adminÊ®©Èôê„ÅßËøΩÂä†
    console.log('üìù „É¶„Éº„Ç∂„Éº„ÇíÁµÑÁπî2„Å´adminÊ®©Èôê„ÅßËøΩÂä†‰∏≠...')
    const { error: member2Error } = await supabase
      .from('organization_members')
      .insert({
        organization_id: org2.id,
        user_id: userId,
        role: 'admin'
      })

    if (member2Error) {
      console.error('‚ùå „É°„É≥„Éê„ÉºËøΩÂä†„Ç®„É©„Éº:', member2Error.message)
      return false
    }

    console.log('‚úÖ adminÊ®©Èôê„ÅßËøΩÂä†„Åó„Åæ„Åó„Åü\n')
  }

  // 9. ÊúÄÁµÇÁ¢∫Ë™ç
  console.log('üîç ÊúÄÁµÇÁ¢∫Ë™ç‰∏≠...')
  const { data: finalMemberships } = await supabase
    .from('organization_members')
    .select(`
      role,
      organization:organizations (
        id,
        name
      )
    `)
    .eq('user_id', userId)
    .is('deleted_at', null)

  console.log(`\nüìä ÊâÄÂ±ûÁµÑÁπî: ${finalMemberships.length}ÂÄã\n`)

  finalMemberships.forEach((m, index) => {
    console.log(`   ${index + 1}. ${m.organization.name}`)
    console.log(`      - ÁµÑÁπîID: ${m.organization.id}`)
    console.log(`      - Ê®©Èôê: ${m.role}`)
  })

  console.log('\n‚úÖ Phase 1ÂÆå‰∫ÜÔºÅmultiorg@example.com„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÊ∫ñÂÇô„ÅåÊï¥„ÅÑ„Åæ„Åó„Åü')
  console.log('üéâ Phase 2ÔºàE2E„ÉÜ„Çπ„ÉàÔºâ„Å´ÈÄ≤„ÇÅ„Åæ„Åô\n')

  return true
}

createMultiOrgUser()
  .then(success => {
    process.exit(success ? 0 : 1)
  })
  .catch(error => {
    console.error('‚ùå „Ç®„É©„Éº:', error)
    process.exit(1)
  })
