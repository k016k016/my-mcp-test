// ÊÆãÁïô„É¶„Éº„Ç∂„Éº„ÇíÂÆåÂÖ®„Å´ÂâäÈô§„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà
import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'

config({ path: '.env.local' })

async function cleanupStuckUsers() {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

  if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Áí∞Â¢ÉÂ§âÊï∞„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')
    process.exit(1)
  }

  const supabase = createClient(supabaseUrl, supabaseServiceKey)

  console.log('üßπ ÊÆãÁïô„É¶„Éº„Ç∂„Éº„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó‰∏≠...\n')

  // ÂâäÈô§ÂØæË±°„ÅÆ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ
  const targetEmails = [
    'member@example.com',
    'admin@example.com',
    'owner@example.com',
    'ops@example.com',
  ]

  for (const email of targetEmails) {
    console.log(`üìß ${email} „ÇíÂâäÈô§‰∏≠...`)

    // „É¶„Éº„Ç∂„ÉºID„ÇíÂèñÂæó
    const { data: users } = await supabase.auth.admin.listUsers()
    const user = users?.users.find((u) => u.email === email)

    if (!user) {
      console.log(`   ‚ÑπÔ∏è  „É¶„Éº„Ç∂„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„ÇìÔºàÊó¢„Å´ÂâäÈô§Ê∏à„ÅøÔºâ`)
      continue
    }

    const userId = user.id
    console.log(`   „É¶„Éº„Ç∂„ÉºID: ${userId}`)

    // 1. Wiki pages „ÇíÂâäÈô§
    try {
      const { error: wikiError } = await supabase
        .from('wiki_pages')
        .delete()
        .eq('created_by', userId)

      if (wikiError && wikiError.code !== 'PGRST116') {
        console.warn(`   ‚ö†Ô∏è  WikiÂâäÈô§Ë≠¶Âëä: ${wikiError.message}`)
      } else if (!wikiError) {
        console.log(`   ‚úÖ Wiki pagesÂâäÈô§ÂÆå‰∫Ü`)
      }
    } catch (error) {
      console.warn(`   ‚ö†Ô∏è  WikiÂâäÈô§„Ç®„É©„ÉºÔºà„Çπ„Ç≠„ÉÉ„ÉóÔºâ`)
    }

    // 2. ÊâÄÂ±ûÁµÑÁπî„ÇíÂèñÂæó
    const { data: memberships } = await supabase
      .from('organization_members')
      .select('organization_id')
      .eq('user_id', userId)

    const orgIds = memberships?.map((m) => m.organization_id) || []

    if (orgIds.length > 0) {
      console.log(`   ÊâÄÂ±ûÁµÑÁπîÊï∞: ${orgIds.length}`)

      for (const orgId of orgIds) {
        // 3. ÁµÑÁπî„ÅÆWiki„Éö„Éº„Ç∏„ÇíÂâäÈô§
        try {
          await supabase.from('wiki_pages').delete().eq('organization_id', orgId)
        } catch (error) {
          // „Çπ„Ç≠„ÉÉ„Éó
        }

        // 4. ÁµÑÁπî„ÅÆÂÖ®„É°„É≥„Éê„Éº„Ç∑„ÉÉ„Éó„ÇíÂâäÈô§
        try {
          await supabase
            .from('organization_members')
            .delete()
            .eq('organization_id', orgId)
        } catch (error) {
          // „Çπ„Ç≠„ÉÉ„Éó
        }

        // 5. ÁµÑÁπî„ÇíÂâäÈô§
        try {
          const { error: orgError } = await supabase
            .from('organizations')
            .delete()
            .eq('id', orgId)

          if (orgError && orgError.code !== 'PGRST116') {
            console.warn(`   ‚ö†Ô∏è  ÁµÑÁπîÂâäÈô§Ë≠¶Âëä: ${orgError.message}`)
          }
        } catch (error) {
          // „Çπ„Ç≠„ÉÉ„Éó
        }
      }
      console.log(`   ‚úÖ ÁµÑÁπîÂâäÈô§ÂÆå‰∫Ü`)
    }

    // 6. „Éó„É≠„Éï„Ç£„Éº„É´„ÇíÂâäÈô§
    try {
      const { error: profileError } = await supabase
        .from('profiles')
        .delete()
        .eq('id', userId)

      if (profileError && profileError.code !== 'PGRST116') {
        console.warn(`   ‚ö†Ô∏è  „Éó„É≠„Éï„Ç£„Éº„É´ÂâäÈô§Ë≠¶Âëä: ${profileError.message}`)
      } else if (!profileError) {
        console.log(`   ‚úÖ „Éó„É≠„Éï„Ç£„Éº„É´ÂâäÈô§ÂÆå‰∫Ü`)
      }
    } catch (error) {
      console.warn(`   ‚ö†Ô∏è  „Éó„É≠„Éï„Ç£„Éº„É´ÂâäÈô§„Ç®„É©„ÉºÔºà„Çπ„Ç≠„ÉÉ„ÉóÔºâ`)
    }

    // 7. Ë™çË®º„É¶„Éº„Ç∂„Éº„ÇíÂâäÈô§
    try {
      const { error: authError } = await supabase.auth.admin.deleteUser(userId)

      if (authError) {
        console.error(`   ‚ùå „É¶„Éº„Ç∂„ÉºÂâäÈô§„Ç®„É©„Éº: ${authError.message}`)
      } else {
        console.log(`   ‚úÖ „É¶„Éº„Ç∂„ÉºÂâäÈô§ÂÆå‰∫Ü`)
      }
    } catch (error) {
      console.error(`   ‚ùå „É¶„Éº„Ç∂„ÉºÂâäÈô§„Ç®„É©„Éº`)
    }

    console.log('')
  }

  console.log('‚úÖ „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÂÆå‰∫Ü')
}

cleanupStuckUsers().catch((error) => {
  console.error('‚ùå „Ç®„É©„Éº:', error)
  process.exit(1)
})
