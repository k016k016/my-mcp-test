# ============================================
# マルチドメイン設定
# ============================================
# このアプリは複数のサブドメインで異なる画面を表示します
# 開発環境ではlocalhost、本番環境では実際のドメインを設定してください

# WWWドメイン（マーケティングサイト）
# 例: https://yourdomain.com
NEXT_PUBLIC_WWW_URL=http://localhost:3000

# APPドメイン（ユーザーアプリケーション）
# 例: https://app.yourdomain.com
NEXT_PUBLIC_APP_URL=http://app.localhost:3000

# ADMINドメイン（管理画面）
# 例: https://admin.yourdomain.com
NEXT_PUBLIC_ADMIN_URL=http://admin.localhost:3000

# OPSドメイン（運用画面）
# 例: https://ops.yourdomain.com
NEXT_PUBLIC_OPS_URL=http://ops.localhost:3000

# OPS用のIP制限（運用画面へのアクセスを制限）
# カンマ区切りで複数指定可能
# 例: OPS_ALLOWED_IPS=203.0.113.1,203.0.113.2,192.168.1.100
# 空の場合はIP制限なし（開発環境では空にしておくことを推奨）
OPS_ALLOWED_IPS=

# ============================================
# Supabase設定
# ============================================
# Supabaseは認証とデータベースに使用します
# 取得方法: https://app.supabase.com/project/_/settings/api

# プロジェクトURL
# 形式: https://xxxxxxxxxxxxx.supabase.co
# 取得場所: Supabase Dashboard > Settings > API > Project URL
NEXT_PUBLIC_SUPABASE_URL=your-project-url

# 匿名キー（Anon/Public Key）
# このキーはクライアント側で使用され、公開されても安全です
# 形式: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.xxx...
# 取得場所: Supabase Dashboard > Settings > API > Project API keys > anon public
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key

# サービスロールキー（オプション、管理者操作用）
# ⚠️ このキーは絶対に公開しないでください！サーバーサイドでのみ使用
# Row Level Security (RLS) をバイパスする強力な権限を持ちます
# 取得場所: Supabase Dashboard > Settings > API > Project API keys > service_role secret
# SUPABASE_SERVICE_ROLE_KEY=your-service-role-key

# ============================================
# Cloudflare R2設定（ファイルストレージ）
# ============================================
# R2はS3互換のオブジェクトストレージサービスです
# 画像やファイルのアップロードに使用します
# 取得方法: https://dash.cloudflare.com

# R2アカウントID
# 形式: 32文字の英数字
# 取得場所: Cloudflare Dashboard > R2 > Overview > Account ID
R2_ACCOUNT_ID=your-account-id

# R2 APIトークンの作成手順:
# 1. Cloudflare Dashboard > R2 > Manage R2 API Tokens
# 2. "Create API Token" をクリック
# 3. 必要な権限を選択（Object Read & Write推奨）
# 4. 作成後に表示されるAccess Key IDとSecret Access Keyを以下に設定

# R2アクセスキーID
# 形式: 32文字の英数字
R2_ACCESS_KEY_ID=your-access-key-id

# R2シークレットアクセスキー
# ⚠️ このキーは絶対に公開しないでください！
# 形式: 43文字程度のランダムな文字列
R2_SECRET_ACCESS_KEY=your-secret-access-key

# R2バケット名
# 作成手順: Cloudflare Dashboard > R2 > Create bucket
# 命名規則: 小文字英数字とハイフンのみ使用可能
# 例: my-app-uploads, production-files
R2_BUCKET_NAME=your-bucket-name

# R2公開URLのドメイン（オプション）
# カスタムドメインを設定している場合のみ必要
# 設定方法: Cloudflare Dashboard > R2 > バケット > Settings > Public Access
# 例: https://cdn.yourdomain.com
# R2_PUBLIC_URL=https://your-custom-domain.com

# ============================================
# Upstash Redis設定（キャッシュ/セッション管理）
# ============================================
# RedisはHTTP REST API経由でアクセスします（サーバーレス対応）
# セッション、キャッシュ、レート制限などに使用します
# 取得方法: https://console.upstash.com

# Redis作成手順:
# 1. Upstash Console > Create Database
# 2. データベース名を入力（例: my-app-cache）
# 3. リージョンを選択（ユーザーに近い場所を推奨）
# 4. TLS/SSL を有効化
# 5. 作成後、REST API情報をコピー

# RedisのREST URL
# 形式: https://xxx-xxxx-xxxxx.upstash.io
# 取得場所: Upstash Console > Database > REST API > UPSTASH_REDIS_REST_URL
UPSTASH_REDIS_REST_URL=your-redis-rest-url

# RedisのREST トークン
# ⚠️ このトークンは絶対に公開しないでください！
# 形式: AXX0AAIncDE... (長いランダム文字列)
# 取得場所: Upstash Console > Database > REST API > UPSTASH_REDIS_REST_TOKEN
UPSTASH_REDIS_REST_TOKEN=your-redis-rest-token

# ============================================
# Sentry設定（エラートラッキング）
# ============================================
# Sentryはエラー監視とパフォーマンス監視に使用します
# 本番環境で推奨、開発環境では省略可能
# 取得方法: https://sentry.io

# Sentryプロジェクト作成手順:
# 1. Sentry.io > Create Project
# 2. プラットフォームで "Next.js" を選択
# 3. プロジェクト名を入力
# 4. 作成後にDSNが表示されます

# Sentry DSN（Data Source Name）
# このキーはクライアント側で使用され、公開されても安全です
# 形式: https://xxxxx@xxxxx.ingest.sentry.io/xxxxx
# 取得場所: Sentry > Settings > Projects > [プロジェクト名] > Client Keys (DSN)
# 使用しない場合はコメントアウト（警告が出なくなります）
NEXT_PUBLIC_SENTRY_DSN=your-sentry-dsn

# Sentry組織名（ビルド時のソースマップアップロード用）
# 形式: my-organization（小文字英数字とハイフン）
# 取得場所: Sentry URL: sentry.io/organizations/[ここがorg名]/
SENTRY_ORG=your-org-slug

# Sentryプロジェクト名
# 形式: my-nextjs-app（小文字英数字とハイフン）
# 取得場所: Sentry URL: sentry.io/organizations/xxx/projects/[ここがproject名]/
SENTRY_PROJECT=your-project-name

# Sentry認証トークン（ソースマップアップロード用）
# ⚠️ このトークンは絶対に公開しないでください！CIでのみ使用
# 作成手順:
# 1. Sentry > Settings > Account > API > Auth Tokens
# 2. "Create New Token" をクリック
# 3. Scopes: project:read, project:releases, org:read を選択
# 4. 生成されたトークンをコピー
SENTRY_AUTH_TOKEN=your-auth-token

# ============================================
# PostHog設定（アナリティクス/プロダクト分析）
# ============================================
# PostHogはユーザー行動分析、A/Bテスト、機能フラグに使用します
# 本番環境で推奨、開発環境では省略可能
# 取得方法: https://app.posthog.com

# PostHogプロジェクト作成手順:
# 1. PostHog > Create organization (初回のみ)
# 2. Create project
# 3. プロジェクト名を入力
# 4. Project API Keyが自動生成されます

# PostHogプロジェクトAPIキー
# このキーはクライアント側で使用され、公開されても安全です
# 形式: phc_xxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# 取得場所: PostHog > Project Settings > Project API Key
# 使用しない場合はコメントアウト
NEXT_PUBLIC_POSTHOG_KEY=your-posthog-key

# PostHogホストURL（オプション、セルフホスト環境のみ）
# デフォルト: https://app.posthog.com
# セルフホストの場合のみ設定してください
# 例: https://posthog.yourdomain.com
# NEXT_PUBLIC_POSTHOG_HOST=https://app.posthog.com

# ============================================
# Chargebee設定（サブスクリプション課金）
# ============================================
# Chargebeeは定期課金、請求書管理に使用します
# 取得方法: https://www.chargebee.com

# Chargebeeアカウント作成手順:
# 1. Chargebee にサインアップ
# 2. サイト名を設定（例: myapp, myapp-test）
# 3. Settings > Configure Chargebee > API Keys で各キーを取得

# Chargebeeサイト名
# これはChargebeeのサブドメインです
# 形式: myapp (https://myapp.chargebee.com のmyapp部分)
# 取得場所: Chargebee URL: https://[ここがサイト名].chargebee.com
CHARGEBEE_SITE=your-site-name

# ChargebeeのAPIキー（サーバーサイド用）
# ⚠️ このキーは絶対に公開しないでください！
# 形式: test_xxxxx または live_xxxxx
# 取得場所: Chargebee > Settings > Configure Chargebee > API Keys and Webhooks > API Keys > Full Access Key
CHARGEBEE_API_KEY=your-api-key

# Chargebee公開可能キー（クライアントサイド用）
# このキーはクライアント側で使用され、公開されても安全です
# 形式: test_xxxxx または live_xxxxx
# 取得場所: Chargebee > Settings > Configure Chargebee > API Keys and Webhooks > Publishable Keys
# 用途: Hosted PagesやDropin Scriptsで使用
NEXT_PUBLIC_CHARGEBEE_PUBLISHABLE_KEY=your-publishable-key

# ============================================
# Resend設定（メール送信）
# ============================================
# Resendはトランザクションメール送信に使用します
# 認証メール、パスワードリセット、通知メールなどに使用
# 取得方法: https://resend.com

# Resendアカウント作成手順:
# 1. Resend にサインアップ
# 2. ドメイン認証を設定（本番環境の場合）
#    - Settings > Domains > Add Domain
#    - DNSレコードを追加してドメインを認証
# 3. API Keys > Create API Key

# ResendのAPIキー
# ⚠️ このキーは絶対に公開しないでください！
# 形式: re_xxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# 取得場所: Resend Dashboard > API Keys > Create API Key
# 権限: Sending access (メール送信のみ) を推奨
RESEND_API_KEY=your-resend-api-key

# デフォルトの送信元メールアドレス
# ドメイン認証していない場合: onboarding@resend.dev (テスト用)
# ドメイン認証済みの場合: noreply@yourdomain.com
# 注意: 送信元アドレスは認証済みドメインと一致している必要があります
# 設定場所: Resend Dashboard > Domains で認証したドメイン
RESEND_FROM_EMAIL=noreply@yourdomain.com

# ============================================
# 設定のヒント
# ============================================
#
# 【開発環境での推奨設定】
# - Supabase: 無料プランで開始可能
# - R2, Redis, Resend: 使用しない機能はコメントアウト
# - Sentry, PostHog: 開発中は省略可能
# - Chargebee: Test Modeを使用
#
# 【本番環境での推奨設定】
# - すべてのキーを本番用に設定
# - NEXT_PUBLIC_* 以外のキーは絶対に公開しない
# - .env.local はGitにコミットしない（.gitignore済み）
# - 本番環境ではVercelなどの環境変数設定を使用
#
# 【セキュリティのベストプラクティス】
# - APIキーは定期的にローテーション
# - サービスロールキーは使用しない（RLSで制御）
# - IPホワイトリストを設定（可能な場合）
# - 本番とテスト環境で異なるキーを使用
#
